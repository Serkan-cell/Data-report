% Welcome to the Data Report coding. We tried to simplify everything to
% make it more readable. We tried to put comments on places we thought it
% would make sense. If there are questions about our coding, you can always
% contact us. Happy reading and trying out the codes. There is one suprise
% code at the end, partially to thank our readers and partialy to thank our
% teachers who really helped us in the hardest time we had these past
% weeks.

% To open/ load our AD_magma.genes.txt

        TGWAS = readtable ('AD_magma.genes.txt');
               
% Approach type 1:

        TGWASclean = [];          
        TGWASclean.CHR = table2array(TGWAS(:,strcmp(TGWAS.Properties.VariableNames,'CHR')))
                        % With this code(line 16) we are starting a new table 'TGWASclean'
                        % and construct it with the columns we are interested in
                        % Do the same code line(8)by replacing  both 'CHR'  with 'GENE', 
                        % 'P', 'SYMBOL', 'ZSTAT' and 'N'
                
% Approach type 2:

        TGWASclean = TGWAS;
        TGWASclean.STOP =[];     
                        % Do the same code (line 25) with '.START','.NSNPS','.NPARAM' and '.N'

% Make PLOT   

        figure,hold on
        pos = [1:size(TGWASclean.P)];
        plot(pos,-log10(TGWASclean.P(:)), '.' )
        odd = find(mod(TGWAS.CHR,2)==1);
        plot(pos(odd),-log10(TGWASclean.P(odd)), '.r' )
        title('ManHattan Plot TGWASclean','FontSize',20)
        
% For loop for the chromosomes

        for ii =1:22
        tmp = find(TGWASclean.CHR==ii);
        XT(ii) = round((tmp(end)-tmp(1))./2) + tmp(1);
        XTlabels{ii} = ([ 'CH' ,num2str(ii)])
        end
        
% Plot the chromosomes

        xticks(double(XT));
        xticklabels(XTlabels)
        y = -log10(10.^-8);
        line([1,pos(end)],[y,y],'LineStyle', '--' )

% For P value smaller than 1-^-8 and putting that in a new tmp table

        SIGNIFICANT_AD_GENES= TGWASclean.P<10^-8 
        tmp = find(SIGNIFICANT_AD_GENES)                 
        SIGNIFICANT_AD_GENES = TGWASclean.SYMBOL(tmp,:) 
                        % This code (line 55) results in the significant genes' names     
        
% To show your new table TGWASoverview

        TGWASoverview = TGWASclean(tmp,:)
        
% To read in the files for the meta and raw data

        tbl = readtable('GSE5281_series_matrix.txt','ReadVariableNames',false); 
        TRAWGeneExpdata = readtable( 'ExpressionData.txt' );
        TMETAGeneExpdata = readtable('SamplesMetaData.txt');
        Tprobes = readtable('ProbeNames.txt');

% Read in the meta-data table about the name and information about the probes

        tidx1 = find(contains(Tprobes.Properties.VariableNames,'probid' ));
        tidx2 = find(strcmp(Tprobes.Properties.VariableNames,'gene_symbol'));
        tbl_probeNames = Tprobes(:,[tidx1,tidx2]);          
        clear tidx* Tprobes                       
                        % Some cleaning up. We do not need these two variables anymore                            

% Merging the two tables

        tidx1 = find(contains(tbl_probeNames.Properties.VariableNames,"probid" ))
        tbl_probeNames.Properties.VariableNames{tidx1} = 'probe_id' ;clear tidx*

% To clean up, we have to use this code beneath. This is to delete the '0x0' char

        tbl_probeNames = tbl_probeNames(:,:);
        tbl_probeNames.gene_symbol(end)
        tbl_probeNames.gene_symbol{end}
        r =(strcmp(tbl_probeNames.gene_symbol,''))
        tbl_probeNames = tbl_probeNames(~r,:)
                        % This code (line 89) is our new probeNames table
                        % without the empty cells

% To join the two tables

        tbl_expression_probeNames = join(tbl_probeNames,TRAWGeneExpdata,'keys','probe_id');

% Region of interest index

        RegionOfInterest = 'MTG';
        meta_REGindx = (strcmp(TMETAGeneExpdata.regionDescriptions,'MTG' ));
        tbl_meta_RegionOfInterest = TMETAGeneExpdata(meta_REGindx,:)
                        % We wanted to look only at the MTG part due to a
                        % not working code for the rest of the interesting
                        % regions. This is something we could and want to
                        % work on in the future.

% Gene of interest index

        GeneOfInterest = 'APOE';
        data_GENindx = find(strcmp(tbl_expression_probeNames.gene_symbol,'APOE'));
        tbl_meta_GeneOfInterest = tbl_expression_probeNames(data_GENindx,:)
                        % The same accounts for the Genes of interest

% To find the Samples that match the indeces from above

        tmpmatch_tissueSamples_indx = find(ismember(tbl_expression_probeNames.Properties.VariableNames,...
                                      tbl_meta_RegionOfInterest.tissueSampleDescriptions))
        tmpSampleVals = tbl_expression_probeNames(data_GENindx,tmpmatch_tissueSamples_indx)

% This code is to average the values

        tmpSampleVals = mean(tmpSampleVals{:,:})

% Pseudo code for adding  column to table: TableA=[tableA, varB];
        tmpT = table(tmpSampleVals','VariableNames' ,{'APOEvals'}) 
                        % Adds values back in table
                        
        tbl_data_GEN_RegionOfInterest = [tbl_meta_RegionOfInterest,tmpT]

% Indeces for the Controls and Patients

        meta_CONindx = (strcmp(tbl_data_GEN_RegionOfInterest.groupID,'control'))
        meta_PATindx = (strcmp(tbl_data_GEN_RegionOfInterest.groupID,'affected'))

        ConVal = tbl_data_GEN_RegionOfInterest.APOEvals(meta_CONindx,:)
        PatVal = tbl_data_GEN_RegionOfInterest.APOEvals(meta_PATindx,:)

% Histogram of the two new Indeces above 'ConVal' and 'PatVal'

        figure,
        h1 = histogram(ConVal)
        hold on
        h2 = histogram(PatVal)


% To straighten the binwidth

        figure,
        h1 = histogram(ConVal)
        h1.BinWidth = 300;
        h1.NumBins = 10;
        hold on
        h2 = histogram(PatVal)
        h2.BinWidth = 300;
        h2.NumBins = 10;

% Barplot for Portfolio

        x = 1:2;
        data = [mean(ConVal), mean(PatVal)];
        errlow = [mean(ConVal)-std(ConVal) mean(PatVal)-std(PatVal) ];
        errhigh = [mean(ConVal)-std(ConVal) mean(PatVal)-std(PatVal) ];
        figure, bar(x, data)
        hold on
        er = errorbar(x,data,errlow,errhigh)
        er.Color = [0 0 0]
        er.LineStyle = 'none'
        title('Barplot controls and AD patients','FontSize', 15)

% T-test the Con- and Patval

        [h,p,ci,stats] = ttest2(ConVal, PatVal)       
                        % If T is negative, that means that the Patient has a higher affection

% WEEEEEK 4

% Using another Region of Interest

        RegionOfInterest = 'HIP' ;
        meta_REGindx = find(strcmp(TMETAGeneExpdata.regionDescriptions,'HIP'));
        tbl_meta_RegionOfInterest = TMETAGeneExpdata(meta_REGindx,:)

% Select the samples out of the total set of probes and samples

        tmpmatch_tissueSamples_indx = find(ismember(tbl_expression_probeNames.Properties.VariableNames...
                                      ,tbl_meta_RegionOfInterest.tissueSampleDescriptions));
        tmpSampleVals = tbl_expression_probeNames(:,tmpmatch_tissueSamples_indx);

% Define which samples are from the controls and which are from the patients

        meta_CONindx = strcmp(tbl_meta_RegionOfInterest.groupID, 'control');
        meta_PATindx = strcmp(tbl_meta_RegionOfInterest.groupID, 'affected');

% Select the values of these samples and perform a t-test between the two

        tmpSampleVals_val = tmpSampleVals{:,:};
        ConVal = tmpSampleVals_val(:,meta_CONindx);
        PatVal = tmpSampleVals_val(:,meta_PATindx);
        [a,b,c,d] = ttest2(ConVal', PatVal')

% Sort the p-values of all the performed t-test, selecting the 10 lowest (so strongest effects)

        [aa,bb] = sort(b)
        tmptop10_probes = bb(1:10)'

% List the genes that match these top10_probes of tbl_probeNames

        GENElist_top10 = tbl_expression_probeNames(tmptop10_probes,:)


% Find the genes in the GWAS file and get their Z-score

        clear tmpzstats
        for ii = 1:10
                [a] = contains(TGWASclean.SYMBOL, GENElist_top10.gene_symbol(ii));
                tmpzstats(ii) = mean(TGWASclean.ZSTAT(find(a)))
                nanmean(abs(tmpzstats))
                                % To average the values and getting the
                                % mean
        end
      
% HENA files

        TPPI_intact = readtable( 'intact_int.txt' );
        TENGS_SYMBOL = readtable( 'ENGS_SYMBOL_list_intact.txt' );

% Find APOE first

        GENE_of_INTEREST = 'APOE'
        clear PPIs_of_interest; tel = 0;
        id = find(strcmp(TENGS_SYMBOL.gene_name, GENE_of_INTEREST));
        d = find(strcmp(TENGS_SYMBOL.ensg, [TPPI_intact.ensg2(id)]));
        SIGGWASGENES = TENGS_SYMBOL.gene_name(d)

% Making a loop over all the SIGNIFICANT_AD_GENES

        for jj = 1: length(SIGNIFICANT_AD_GENES);

                GENE_NAMES = SIGNIFICANT_AD_GENES(jj);
                id = find(strcmp(SIGNIFICANT_AD_GENES, GENE_of_INTEREST));

        if nnz(id)==0; continue; end; 

                tmpPPI= [TPPI_intact.ensg2(id)]

                                 for ii = 1:size(tmpPPI,1)
                                        d = find(strcmp(TENGS_SYMBOL.ensg, tmpPPI(ii)));
                                        tel = tel+1;
                                        PPIs_of_interest(tel) = TENGS_SYMBOL.gene_name(d(1))
                                 end
                                 
                PPIs_of_interest = unique(PPIs_of_interest(tel))
                TPPI = table(PPIs_of_interest(:));
                TPPI.Properties.VariableNames = {'gene_name'}

        end

% Another Region of Interest

        RegionOfInterest = 'MTG';
        for ii = 1:size(TPPI.gene_name,2)
                a = find(strcmp(TPPI.gene_name, RegionOfInterest));

                        if isempty(a); continue ; end

                meta_REGindx = (strcmp(TMETAGeneExpdata.regionDescriptions, RegionOfInterest));
                tbl_meta_RegionOfInterest = TMETAGeneExpdata(meta_REGindx,:);
                tmpmatch_tissueSamples_indx = find(ismember(tbl_expression_probeNames.Properties.VariableNames,...
                                             tbl_meta_RegionOfInterest.tissueSampleDescriptions));
                tmpSampleVals = tbl_expression_probeNames(a,tmpmatch_tissueSamples_indx);

                meta_CONindx = (strcmp(tbl_meta_RegionOfInterest.groupID,'control' ));
                meta_PATindx = (strcmp(tbl_meta_RegionOfInterest.groupID,'affected'));

                ConVal = mean(tmpSampleVals{:,meta_CONindx},1);
                PatVal = mean(tmpSampleVals{:,meta_PATindx},1);

                [h,p,ci,stats]=ttest2(ConVal, PatVal)

                GENexpAD_stats(ii) = stats.tstat;

                clear tmp*

                tmpTPPI = table(GENexpAD_stats(:));
                tmpTPPI.Properties.VariableNames = {'GENexpAD_stats'};
                TPPI_2 = [TPPI, tmpTPPI]

        end

% PLOT
        G = graph(PPI_AD_matrix_bidirectional_binary)
        G.Nodes.Names = unique_ensg_all;
        figure;
        plot(G, 'NodeLabel' , G.Nodes.Names, 'LineWidth' , G.Edges.Weight, 'Layout', 'force' )

%WEEEEEK 5

% Load AHBA
        AHBA= load('AHBA_transcriptomics_114atlas.mat');

% Find APOE        
        find(strcmp(AHBA.gene_symbol,'APOE'));

% Filtering out the right hemisphere
        AHBA.regionDescription(1:10,:);
        r= contains(AHBA.regionDescription,'ctx-rh-');
        AHBA.regionDescription= AHBA.regionDescription(~r);
        
% Plot
        figure, histogram(APOE_expression_DK114_lh)
        
% Suprise code, 
        t= linspace(-pi,pi, 350);
        X= t.*sin(pi*.872 *sin(t)./t);
        Y= -abs(t) .*cos(pi* sin(t)./t);
        plot(X,Y);
        fill(X,Y,'r');
        axis square;
        set(gcf, 'Position', get(0, 'Screensize'));
        title('Showing my gratefulness to my teachers', 'FontSize',30)

   
